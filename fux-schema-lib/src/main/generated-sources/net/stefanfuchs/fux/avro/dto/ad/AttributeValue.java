/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.stefanfuchs.fux.avro.dto.ad;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Single attribute value of an advert */
@org.apache.avro.specific.AvroGenerated
public class AttributeValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1432366462374834075L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttributeValue\",\"namespace\":\"net.stefanfuchs.fux.avro.dto.ad\",\"doc\":\"Single attribute value of an advert\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique code that identifies the attribute\",\"default\":null},{\"name\":\"textValue\",\"type\":[\"null\",\"string\"],\"doc\":\"Value, if the attribute is of type text\",\"default\":null},{\"name\":\"intValue\",\"type\":[\"null\",\"long\"],\"doc\":\"Value, if the attribute is of type long/int\",\"default\":null},{\"name\":\"decimalValue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":16,\"scale\":4}],\"doc\":\"Value, if the attribute is of type decimal/floating point\",\"default\":null},{\"name\":\"boolValue\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Value, if the attribute is of type boolean\",\"default\":null},{\"name\":\"dateValue\",\"type\":[\"null\",\"long\"],\"doc\":\"Value, if the attribute is of type date/time\",\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AttributeValue> ENCODER =
      new BinaryMessageEncoder<AttributeValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AttributeValue> DECODER =
      new BinaryMessageDecoder<AttributeValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AttributeValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AttributeValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AttributeValue>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AttributeValue to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AttributeValue from a ByteBuffer. */
  public static AttributeValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique code that identifies the attribute */
  @Deprecated public java.lang.CharSequence code;
  /** Value, if the attribute is of type text */
  @Deprecated public java.lang.CharSequence textValue;
  /** Value, if the attribute is of type long/int */
  @Deprecated public java.lang.Long intValue;
  /** Value, if the attribute is of type decimal/floating point */
  @Deprecated public java.nio.ByteBuffer decimalValue;
  /** Value, if the attribute is of type boolean */
  @Deprecated public java.lang.Boolean boolValue;
  /** Value, if the attribute is of type date/time */
  @Deprecated public java.lang.Long dateValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AttributeValue() {}

  /**
   * All-args constructor.
   * @param code Unique code that identifies the attribute
   * @param textValue Value, if the attribute is of type text
   * @param intValue Value, if the attribute is of type long/int
   * @param decimalValue Value, if the attribute is of type decimal/floating point
   * @param boolValue Value, if the attribute is of type boolean
   * @param dateValue Value, if the attribute is of type date/time
   */
  public AttributeValue(java.lang.CharSequence code, java.lang.CharSequence textValue, java.lang.Long intValue, java.nio.ByteBuffer decimalValue, java.lang.Boolean boolValue, java.lang.Long dateValue) {
    this.code = code;
    this.textValue = textValue;
    this.intValue = intValue;
    this.decimalValue = decimalValue;
    this.boolValue = boolValue;
    this.dateValue = dateValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return textValue;
    case 2: return intValue;
    case 3: return decimalValue;
    case 4: return boolValue;
    case 5: return dateValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: textValue = (java.lang.CharSequence)value$; break;
    case 2: intValue = (java.lang.Long)value$; break;
    case 3: decimalValue = (java.nio.ByteBuffer)value$; break;
    case 4: boolValue = (java.lang.Boolean)value$; break;
    case 5: dateValue = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return Unique code that identifies the attribute
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * Unique code that identifies the attribute
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'textValue' field.
   * @return Value, if the attribute is of type text
   */
  public java.lang.CharSequence getTextValue() {
    return textValue;
  }

  /**
   * Sets the value of the 'textValue' field.
   * Value, if the attribute is of type text
   * @param value the value to set.
   */
  public void setTextValue(java.lang.CharSequence value) {
    this.textValue = value;
  }

  /**
   * Gets the value of the 'intValue' field.
   * @return Value, if the attribute is of type long/int
   */
  public java.lang.Long getIntValue() {
    return intValue;
  }

  /**
   * Sets the value of the 'intValue' field.
   * Value, if the attribute is of type long/int
   * @param value the value to set.
   */
  public void setIntValue(java.lang.Long value) {
    this.intValue = value;
  }

  /**
   * Gets the value of the 'decimalValue' field.
   * @return Value, if the attribute is of type decimal/floating point
   */
  public java.nio.ByteBuffer getDecimalValue() {
    return decimalValue;
  }

  /**
   * Sets the value of the 'decimalValue' field.
   * Value, if the attribute is of type decimal/floating point
   * @param value the value to set.
   */
  public void setDecimalValue(java.nio.ByteBuffer value) {
    this.decimalValue = value;
  }

  /**
   * Gets the value of the 'boolValue' field.
   * @return Value, if the attribute is of type boolean
   */
  public java.lang.Boolean getBoolValue() {
    return boolValue;
  }

  /**
   * Sets the value of the 'boolValue' field.
   * Value, if the attribute is of type boolean
   * @param value the value to set.
   */
  public void setBoolValue(java.lang.Boolean value) {
    this.boolValue = value;
  }

  /**
   * Gets the value of the 'dateValue' field.
   * @return Value, if the attribute is of type date/time
   */
  public java.lang.Long getDateValue() {
    return dateValue;
  }

  /**
   * Sets the value of the 'dateValue' field.
   * Value, if the attribute is of type date/time
   * @param value the value to set.
   */
  public void setDateValue(java.lang.Long value) {
    this.dateValue = value;
  }

  /**
   * Creates a new AttributeValue RecordBuilder.
   * @return A new AttributeValue RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder newBuilder() {
    return new net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder();
  }

  /**
   * Creates a new AttributeValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AttributeValue RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder newBuilder(net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder other) {
    return new net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder(other);
  }

  /**
   * Creates a new AttributeValue RecordBuilder by copying an existing AttributeValue instance.
   * @param other The existing instance to copy.
   * @return A new AttributeValue RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder newBuilder(net.stefanfuchs.fux.avro.dto.ad.AttributeValue other) {
    return new net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder(other);
  }

  /**
   * RecordBuilder for AttributeValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttributeValue>
    implements org.apache.avro.data.RecordBuilder<AttributeValue> {

    /** Unique code that identifies the attribute */
    private java.lang.CharSequence code;
    /** Value, if the attribute is of type text */
    private java.lang.CharSequence textValue;
    /** Value, if the attribute is of type long/int */
    private java.lang.Long intValue;
    /** Value, if the attribute is of type decimal/floating point */
    private java.nio.ByteBuffer decimalValue;
    /** Value, if the attribute is of type boolean */
    private java.lang.Boolean boolValue;
    /** Value, if the attribute is of type date/time */
    private java.lang.Long dateValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.textValue)) {
        this.textValue = data().deepCopy(fields()[1].schema(), other.textValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intValue)) {
        this.intValue = data().deepCopy(fields()[2].schema(), other.intValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimalValue)) {
        this.decimalValue = data().deepCopy(fields()[3].schema(), other.decimalValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.boolValue)) {
        this.boolValue = data().deepCopy(fields()[4].schema(), other.boolValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dateValue)) {
        this.dateValue = data().deepCopy(fields()[5].schema(), other.dateValue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AttributeValue instance
     * @param other The existing instance to copy.
     */
    private Builder(net.stefanfuchs.fux.avro.dto.ad.AttributeValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.textValue)) {
        this.textValue = data().deepCopy(fields()[1].schema(), other.textValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intValue)) {
        this.intValue = data().deepCopy(fields()[2].schema(), other.intValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimalValue)) {
        this.decimalValue = data().deepCopy(fields()[3].schema(), other.decimalValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.boolValue)) {
        this.boolValue = data().deepCopy(fields()[4].schema(), other.boolValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dateValue)) {
        this.dateValue = data().deepCopy(fields()[5].schema(), other.dateValue);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * Unique code that identifies the attribute
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Unique code that identifies the attribute
      * @param value The value of 'code'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Unique code that identifies the attribute
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * Unique code that identifies the attribute
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'textValue' field.
      * Value, if the attribute is of type text
      * @return The value.
      */
    public java.lang.CharSequence getTextValue() {
      return textValue;
    }

    /**
      * Sets the value of the 'textValue' field.
      * Value, if the attribute is of type text
      * @param value The value of 'textValue'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setTextValue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.textValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'textValue' field has been set.
      * Value, if the attribute is of type text
      * @return True if the 'textValue' field has been set, false otherwise.
      */
    public boolean hasTextValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'textValue' field.
      * Value, if the attribute is of type text
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearTextValue() {
      textValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'intValue' field.
      * Value, if the attribute is of type long/int
      * @return The value.
      */
    public java.lang.Long getIntValue() {
      return intValue;
    }

    /**
      * Sets the value of the 'intValue' field.
      * Value, if the attribute is of type long/int
      * @param value The value of 'intValue'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setIntValue(java.lang.Long value) {
      validate(fields()[2], value);
      this.intValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'intValue' field has been set.
      * Value, if the attribute is of type long/int
      * @return True if the 'intValue' field has been set, false otherwise.
      */
    public boolean hasIntValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'intValue' field.
      * Value, if the attribute is of type long/int
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearIntValue() {
      intValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimalValue' field.
      * Value, if the attribute is of type decimal/floating point
      * @return The value.
      */
    public java.nio.ByteBuffer getDecimalValue() {
      return decimalValue;
    }

    /**
      * Sets the value of the 'decimalValue' field.
      * Value, if the attribute is of type decimal/floating point
      * @param value The value of 'decimalValue'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setDecimalValue(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.decimalValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'decimalValue' field has been set.
      * Value, if the attribute is of type decimal/floating point
      * @return True if the 'decimalValue' field has been set, false otherwise.
      */
    public boolean hasDecimalValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'decimalValue' field.
      * Value, if the attribute is of type decimal/floating point
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearDecimalValue() {
      decimalValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'boolValue' field.
      * Value, if the attribute is of type boolean
      * @return The value.
      */
    public java.lang.Boolean getBoolValue() {
      return boolValue;
    }

    /**
      * Sets the value of the 'boolValue' field.
      * Value, if the attribute is of type boolean
      * @param value The value of 'boolValue'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setBoolValue(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.boolValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'boolValue' field has been set.
      * Value, if the attribute is of type boolean
      * @return True if the 'boolValue' field has been set, false otherwise.
      */
    public boolean hasBoolValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'boolValue' field.
      * Value, if the attribute is of type boolean
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearBoolValue() {
      boolValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateValue' field.
      * Value, if the attribute is of type date/time
      * @return The value.
      */
    public java.lang.Long getDateValue() {
      return dateValue;
    }

    /**
      * Sets the value of the 'dateValue' field.
      * Value, if the attribute is of type date/time
      * @param value The value of 'dateValue'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder setDateValue(java.lang.Long value) {
      validate(fields()[5], value);
      this.dateValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dateValue' field has been set.
      * Value, if the attribute is of type date/time
      * @return True if the 'dateValue' field has been set, false otherwise.
      */
    public boolean hasDateValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dateValue' field.
      * Value, if the attribute is of type date/time
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.AttributeValue.Builder clearDateValue() {
      dateValue = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AttributeValue build() {
      try {
        AttributeValue record = new AttributeValue();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.textValue = fieldSetFlags()[1] ? this.textValue : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.intValue = fieldSetFlags()[2] ? this.intValue : (java.lang.Long) defaultValue(fields()[2]);
        record.decimalValue = fieldSetFlags()[3] ? this.decimalValue : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.boolValue = fieldSetFlags()[4] ? this.boolValue : (java.lang.Boolean) defaultValue(fields()[4]);
        record.dateValue = fieldSetFlags()[5] ? this.dateValue : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AttributeValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<AttributeValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AttributeValue>
    READER$ = (org.apache.avro.io.DatumReader<AttributeValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
