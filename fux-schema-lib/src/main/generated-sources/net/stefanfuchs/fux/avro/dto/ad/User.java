/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.stefanfuchs.fux.avro.dto.ad;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information about the user that owns an advert */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3785802493708549010L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"net.stefanfuchs.fux.avro.dto.ad\",\"doc\":\"Information about the user that owns an advert\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\",\"doc\":\"The UUID of the user used between services\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Username (unique), also used to login\",\"default\":null},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"doc\":\"eMail address of the user\",\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",\"string\"],\"doc\":\"Landline phone number the user entered in his profile\",\"default\":null},{\"name\":\"mobile\",\"type\":[\"null\",\"string\"],\"doc\":\"Mobile phone number the user entered in his profile\",\"default\":null},{\"name\":\"fax\",\"type\":[\"null\",\"string\"],\"doc\":\"fax number\",\"default\":null},{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"doc\":\"URL to the homepage of the user\",\"default\":null},{\"name\":\"picture\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UserImage\",\"doc\":\"Images reference of an user\",\"fields\":[{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"doc\":\"path to the image\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Description of the image\",\"default\":null}]}],\"doc\":\"The users profile picture\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this User to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a User from a ByteBuffer. */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The UUID of the user used between services */
  @Deprecated public java.lang.CharSequence uuid;
  /** Username (unique), also used to login */
  @Deprecated public java.lang.CharSequence name;
  /** eMail address of the user */
  @Deprecated public java.lang.CharSequence email;
  /** Landline phone number the user entered in his profile */
  @Deprecated public java.lang.CharSequence phone;
  /** Mobile phone number the user entered in his profile */
  @Deprecated public java.lang.CharSequence mobile;
  /** fax number */
  @Deprecated public java.lang.CharSequence fax;
  /** URL to the homepage of the user */
  @Deprecated public java.lang.CharSequence url;
  /** The users profile picture */
  @Deprecated public net.stefanfuchs.fux.avro.dto.ad.UserImage picture;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param uuid The UUID of the user used between services
   * @param name Username (unique), also used to login
   * @param email eMail address of the user
   * @param phone Landline phone number the user entered in his profile
   * @param mobile Mobile phone number the user entered in his profile
   * @param fax fax number
   * @param url URL to the homepage of the user
   * @param picture The users profile picture
   */
  public User(java.lang.CharSequence uuid, java.lang.CharSequence name, java.lang.CharSequence email, java.lang.CharSequence phone, java.lang.CharSequence mobile, java.lang.CharSequence fax, java.lang.CharSequence url, net.stefanfuchs.fux.avro.dto.ad.UserImage picture) {
    this.uuid = uuid;
    this.name = name;
    this.email = email;
    this.phone = phone;
    this.mobile = mobile;
    this.fax = fax;
    this.url = url;
    this.picture = picture;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return email;
    case 3: return phone;
    case 4: return mobile;
    case 5: return fax;
    case 6: return url;
    case 7: return picture;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: phone = (java.lang.CharSequence)value$; break;
    case 4: mobile = (java.lang.CharSequence)value$; break;
    case 5: fax = (java.lang.CharSequence)value$; break;
    case 6: url = (java.lang.CharSequence)value$; break;
    case 7: picture = (net.stefanfuchs.fux.avro.dto.ad.UserImage)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The UUID of the user used between services
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * The UUID of the user used between services
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Username (unique), also used to login
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Username (unique), also used to login
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return eMail address of the user
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * eMail address of the user
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return Landline phone number the user entered in his profile
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * Landline phone number the user entered in his profile
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'mobile' field.
   * @return Mobile phone number the user entered in his profile
   */
  public java.lang.CharSequence getMobile() {
    return mobile;
  }

  /**
   * Sets the value of the 'mobile' field.
   * Mobile phone number the user entered in his profile
   * @param value the value to set.
   */
  public void setMobile(java.lang.CharSequence value) {
    this.mobile = value;
  }

  /**
   * Gets the value of the 'fax' field.
   * @return fax number
   */
  public java.lang.CharSequence getFax() {
    return fax;
  }

  /**
   * Sets the value of the 'fax' field.
   * fax number
   * @param value the value to set.
   */
  public void setFax(java.lang.CharSequence value) {
    this.fax = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return URL to the homepage of the user
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * URL to the homepage of the user
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'picture' field.
   * @return The users profile picture
   */
  public net.stefanfuchs.fux.avro.dto.ad.UserImage getPicture() {
    return picture;
  }

  /**
   * Sets the value of the 'picture' field.
   * The users profile picture
   * @param value the value to set.
   */
  public void setPicture(net.stefanfuchs.fux.avro.dto.ad.UserImage value) {
    this.picture = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.User.Builder newBuilder() {
    return new net.stefanfuchs.fux.avro.dto.ad.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.User.Builder newBuilder(net.stefanfuchs.fux.avro.dto.ad.User.Builder other) {
    return new net.stefanfuchs.fux.avro.dto.ad.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static net.stefanfuchs.fux.avro.dto.ad.User.Builder newBuilder(net.stefanfuchs.fux.avro.dto.ad.User other) {
    return new net.stefanfuchs.fux.avro.dto.ad.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    /** The UUID of the user used between services */
    private java.lang.CharSequence uuid;
    /** Username (unique), also used to login */
    private java.lang.CharSequence name;
    /** eMail address of the user */
    private java.lang.CharSequence email;
    /** Landline phone number the user entered in his profile */
    private java.lang.CharSequence phone;
    /** Mobile phone number the user entered in his profile */
    private java.lang.CharSequence mobile;
    /** fax number */
    private java.lang.CharSequence fax;
    /** URL to the homepage of the user */
    private java.lang.CharSequence url;
    /** The users profile picture */
    private net.stefanfuchs.fux.avro.dto.ad.UserImage picture;
    private net.stefanfuchs.fux.avro.dto.ad.UserImage.Builder pictureBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.stefanfuchs.fux.avro.dto.ad.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phone)) {
        this.phone = data().deepCopy(fields()[3].schema(), other.phone);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mobile)) {
        this.mobile = data().deepCopy(fields()[4].schema(), other.mobile);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fax)) {
        this.fax = data().deepCopy(fields()[5].schema(), other.fax);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.url)) {
        this.url = data().deepCopy(fields()[6].schema(), other.url);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.picture)) {
        this.picture = data().deepCopy(fields()[7].schema(), other.picture);
        fieldSetFlags()[7] = true;
      }
      if (other.hasPictureBuilder()) {
        this.pictureBuilder = net.stefanfuchs.fux.avro.dto.ad.UserImage.newBuilder(other.getPictureBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(net.stefanfuchs.fux.avro.dto.ad.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phone)) {
        this.phone = data().deepCopy(fields()[3].schema(), other.phone);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mobile)) {
        this.mobile = data().deepCopy(fields()[4].schema(), other.mobile);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fax)) {
        this.fax = data().deepCopy(fields()[5].schema(), other.fax);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.url)) {
        this.url = data().deepCopy(fields()[6].schema(), other.url);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.picture)) {
        this.picture = data().deepCopy(fields()[7].schema(), other.picture);
        fieldSetFlags()[7] = true;
      }
      this.pictureBuilder = null;
    }

    /**
      * Gets the value of the 'uuid' field.
      * The UUID of the user used between services
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * The UUID of the user used between services
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * The UUID of the user used between services
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * The UUID of the user used between services
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Username (unique), also used to login
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Username (unique), also used to login
      * @param value The value of 'name'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Username (unique), also used to login
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Username (unique), also used to login
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * eMail address of the user
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * eMail address of the user
      * @param value The value of 'email'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * eMail address of the user
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * eMail address of the user
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * Landline phone number the user entered in his profile
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * Landline phone number the user entered in his profile
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.phone = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * Landline phone number the user entered in his profile
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'phone' field.
      * Landline phone number the user entered in his profile
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobile' field.
      * Mobile phone number the user entered in his profile
      * @return The value.
      */
    public java.lang.CharSequence getMobile() {
      return mobile;
    }

    /**
      * Sets the value of the 'mobile' field.
      * Mobile phone number the user entered in his profile
      * @param value The value of 'mobile'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setMobile(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.mobile = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mobile' field has been set.
      * Mobile phone number the user entered in his profile
      * @return True if the 'mobile' field has been set, false otherwise.
      */
    public boolean hasMobile() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mobile' field.
      * Mobile phone number the user entered in his profile
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearMobile() {
      mobile = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'fax' field.
      * fax number
      * @return The value.
      */
    public java.lang.CharSequence getFax() {
      return fax;
    }

    /**
      * Sets the value of the 'fax' field.
      * fax number
      * @param value The value of 'fax'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setFax(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.fax = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'fax' field has been set.
      * fax number
      * @return True if the 'fax' field has been set, false otherwise.
      */
    public boolean hasFax() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'fax' field.
      * fax number
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearFax() {
      fax = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * URL to the homepage of the user
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * URL to the homepage of the user
      * @param value The value of 'url'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.url = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * URL to the homepage of the user
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'url' field.
      * URL to the homepage of the user
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearUrl() {
      url = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'picture' field.
      * The users profile picture
      * @return The value.
      */
    public net.stefanfuchs.fux.avro.dto.ad.UserImage getPicture() {
      return picture;
    }

    /**
      * Sets the value of the 'picture' field.
      * The users profile picture
      * @param value The value of 'picture'.
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setPicture(net.stefanfuchs.fux.avro.dto.ad.UserImage value) {
      validate(fields()[7], value);
      this.pictureBuilder = null;
      this.picture = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'picture' field has been set.
      * The users profile picture
      * @return True if the 'picture' field has been set, false otherwise.
      */
    public boolean hasPicture() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'picture' field and creates one if it doesn't exist yet.
     * The users profile picture
     * @return This builder.
     */
    public net.stefanfuchs.fux.avro.dto.ad.UserImage.Builder getPictureBuilder() {
      if (pictureBuilder == null) {
        if (hasPicture()) {
          setPictureBuilder(net.stefanfuchs.fux.avro.dto.ad.UserImage.newBuilder(picture));
        } else {
          setPictureBuilder(net.stefanfuchs.fux.avro.dto.ad.UserImage.newBuilder());
        }
      }
      return pictureBuilder;
    }

    /**
     * Sets the Builder instance for the 'picture' field
     * The users profile picture
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder setPictureBuilder(net.stefanfuchs.fux.avro.dto.ad.UserImage.Builder value) {
      clearPicture();
      pictureBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'picture' field has an active Builder instance
     * The users profile picture
     * @return True if the 'picture' field has an active Builder instance
     */
    public boolean hasPictureBuilder() {
      return pictureBuilder != null;
    }

    /**
      * Clears the value of the 'picture' field.
      * The users profile picture
      * @return This builder.
      */
    public net.stefanfuchs.fux.avro.dto.ad.User.Builder clearPicture() {
      picture = null;
      pictureBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.phone = fieldSetFlags()[3] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.mobile = fieldSetFlags()[4] ? this.mobile : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.fax = fieldSetFlags()[5] ? this.fax : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.url = fieldSetFlags()[6] ? this.url : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (pictureBuilder != null) {
          record.picture = this.pictureBuilder.build();
        } else {
          record.picture = fieldSetFlags()[7] ? this.picture : (net.stefanfuchs.fux.avro.dto.ad.UserImage) defaultValue(fields()[7]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
